import java.io.*;
import java.net.*;
import java.util.*;
import java.nio.file.*;
import org.json.JSONArray;
import org.json.JSONObject;

public class ServiceStatusMatcher {
    public static void main(String[] args) {
        String csvInputPath = "pte_parameters.csv";
        String csvOutputPath = "service_status_matched.csv";
        String urlString = "your-url-here";
        String authToken = "your-auth-token-here";

        try {
            // Read service status from URL
            Map<String, ServiceStatus> serviceStatuses = fetchServiceStatus(urlString, authToken);
            
            // Read and process CSV
            List<String[]> matchedEntries = processCSV(csvInputPath, serviceStatuses);
            
            // Write matched entries to new CSV
            writeMatchedEntries(csvOutputPath, matchedEntries);
            
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private static String normalizeServiceName(String serviceName) {
        // Remove prefix "pte-173720-" if exists
        if (serviceName.startsWith("pte-173720-")) {
            serviceName = serviceName.substring("pte-173720-".length());
        }
        // Remove suffix "-blue" or "-green" if exists
        serviceName = serviceName.replaceAll("-(?:blue|green)$", "");
        return serviceName;
    }

    private static Map<String, ServiceStatus> fetchServiceStatus(String urlString, String authToken) throws Exception {
        URL url = new URL(urlString);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod("GET");
        conn.setRequestProperty("Authorization", "Basic " + authToken);

        Map<String, ServiceStatus> serviceStatuses = new HashMap<>();
        
        if (conn.getResponseCode() == HttpURLConnection.HTTP_OK) {
            BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            StringBuilder response = new StringBuilder();
            String line;
            
            while ((line = reader.readLine()) != null) {
                response.append(line);
            }
            reader.close();

            JSONArray jsonArray = new JSONArray(response.toString());
            for (int i = 0; i < jsonArray.length(); i++) {
                JSONObject service = jsonArray.getJSONObject(i);
                String originalServiceName = service.getString("serviceName");
                String normalizedServiceName = normalizeServiceName(originalServiceName);
                
                ServiceStatus status = new ServiceStatus(
                    originalServiceName,
                    normalizedServiceName,
                    service.getString("projectName"),
                    service.getInt("ready"),
                    service.getInt("running")
                );
                serviceStatuses.put(normalizedServiceName, status);
            }
        }
        
        conn.disconnect();
        return serviceStatuses;
    }

    private static List<String[]> processCSV(String csvPath, Map<String, ServiceStatus> serviceStatuses) throws Exception {
        List<String[]> matchedEntries = new ArrayList<>();
        
        BufferedReader reader = new BufferedReader(new FileReader(csvPath));
        
        // Read headers
        String headerLine = reader.readLine();
        String[] headers = headerLine.split(",");
        String[] newHeaders = Arrays.copyOf(headers, headers.length + 3); // +3 for Ready, Running, and Original Service Name
        newHeaders[headers.length] = "Original Service Name";
        newHeaders[headers.length + 1] = "Ready";
        newHeaders[headers.length + 2] = "Running";
        matchedEntries.add(newHeaders);
        
        String line;
        while ((line = reader.readLine()) != null) {
            String[] values = splitCSVLine(line);
            String serviceName = values[0];
            String namespace = values[1];
            
            // Check if namespace contains "namicg" and service exists in status
            if (namespace.contains("namicg") && serviceStatuses.containsKey(serviceName)) {
                ServiceStatus status = serviceStatuses.get(serviceName);
                
                // Create new array with additional columns
                String[] newLine = Arrays.copyOf(values, values.length + 3);
                newLine[values.length] = status.originalServiceName; // Add original service name from JSON
                newLine[values.length + 1] = String.valueOf(status.ready);
                newLine[values.length + 2] = String.valueOf(status.running);
                
                matchedEntries.add(newLine);
            }
        }
        
        reader.close();
        return matchedEntries;
    }

    // ... [previous splitCSVLine and escapeCSV methods remain unchanged] ...

    private static class ServiceStatus {
        String originalServiceName;
        String normalizedServiceName;
        String projectName;
        int ready;
        int running;

        ServiceStatus(String originalServiceName, String normalizedServiceName, String projectName, int ready, int running) {
            this.originalServiceName = originalServiceName;
            this.normalizedServiceName = normalizedServiceName;
            this.projectName = projectName;
            this.ready = ready;
            this.running = running;
        }
    }

    // ... [previous writeMatchedEntries, splitCSVLine, and escapeCSV methods remain unchanged] ...
}
